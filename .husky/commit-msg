#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Commit message validation hook

commit_regex='^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?: .{1,100}$'
commit_msg=$(cat "$1")

echo "üìù Validating commit message..."

# Check commit message format
if ! echo "$commit_msg" | grep -qE "$commit_regex"; then
  echo "‚ùå Invalid commit message format!"
  echo ""
  echo "Commit message must follow Conventional Commits format:"
  echo "  <type>(<scope>): <subject>"
  echo ""
  echo "Types:"
  echo "  feat:     A new feature"
  echo "  fix:      A bug fix"
  echo "  docs:     Documentation changes"
  echo "  style:    Code style changes (formatting, etc)"
  echo "  refactor: Code refactoring"
  echo "  perf:     Performance improvements"
  echo "  test:     Adding or updating tests"
  echo "  chore:    Maintenance tasks"
  echo "  build:    Build system changes"
  echo "  ci:       CI/CD changes"
  echo "  revert:   Reverting a previous commit"
  echo ""
  echo "Example:"
  echo "  feat(auth): add password reset functionality"
  echo "  fix(api): handle null response in XBRL parser"
  echo ""
  echo "Your commit message:"
  echo "  $commit_msg"
  exit 1
fi

# Check commit message length
subject=$(echo "$commit_msg" | head -1)
if [ ${#subject} -gt 100 ]; then
  echo "‚ö†Ô∏è  Warning: Commit subject is too long (${#subject} chars, max 100)"
  echo "Consider making it more concise."
fi

echo "‚úÖ Commit message is valid!"