name: PR - Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'

jobs:
  pr-title:
    name: PR Title Check
    runs-on: ubuntu-latest

    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            build
            ci
            revert

  changed-files:
    name: Analyze Changed Files
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      frontend: ${{ steps.changes.outputs.frontend }}
      database: ${{ steps.changes.outputs.database }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'app/api/**'
              - 'lib/**'
              - 'utils/**'
            frontend:
              - 'app/**'
              - 'components/**'
              - 'public/**'
            database:
              - 'supabase/**'
              - '**/*.sql'

  type-safety:
    name: Type Safety Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript strict mode check
        run: |
          echo "Running TypeScript with strict mode..."
          npx tsc --noEmit --strict

          # Check for any type errors
          if npx tsc --noEmit --strict 2>&1 | grep -E "error TS[0-9]+:"; then
            echo "❌ TypeScript errors detected. Please fix before merging."
            exit 1
          else
            echo "✅ No TypeScript errors found."
          fi

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint check with zero warnings
        run: npm run lint -- --max-warnings=0

      - name: Check import order
        run: |
          # Check for consistent import ordering
          if grep -r "^import.*from 'react'" --include="*.ts" --include="*.tsx" app/ components/ | grep -A1 "^import.*from '\./"; then
            echo "⚠️ Warning: External imports should come before relative imports"
          fi

      - name: Check for duplicate code
        run: |
          npx jscpd . --min-lines 5 --min-tokens 50 --reporters "console" --ignore "**/*.test.*,**/*.spec.*,**/node_modules/**,**/.next/**" || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Audit dependencies
        run: |
          npm audit --audit-level=moderate || echo "⚠️ Security vulnerabilities found"

      - name: Check for hardcoded secrets
        run: |
          # Check for API keys (excluding patterns and examples)
          if grep -r "xbrl_[a-zA-Z0-9_-]\{32,\}" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next . | grep -v "regex\|pattern\|example\|test\|mock\|/\*\|//\|^\s*\*\|^[[:space:]]*\*"; then
            echo "❌ Hardcoded API key detected!"
            exit 1
          fi

          # Check for Supabase service keys
          if grep -r "service_role.*key" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next . | grep -v "process.env"; then
            echo "❌ Hardcoded service role key detected!"
            exit 1
          fi

          # Check for other common secrets
          if grep -rE "(password|secret|token)\s*=\s*[\"'][^\"']+[\"']" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next . | grep -v "process.env"; then
            echo "⚠️ Warning: Possible hardcoded secret detected"
          fi

  preview-build:
    name: Preview Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [type-safety, code-quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Check build size
        run: |
          # Get the size of the .next directory
          size=$(du -sh .next | cut -f1)
          echo "Build size: $size"

          # Check if build is too large (example: > 100MB)
          size_mb=$(du -sm .next | cut -f1)
          if [ $size_mb -gt 100 ]; then
            echo "⚠️ Warning: Build size is large ($size). Consider code splitting."
          fi

  database-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    if: needs.changed-files.outputs.database == 'true'
    needs: changed-files

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate migrations
        run: |
          if [ -d "supabase/migrations" ]; then
            echo "Checking migration files..."
            for file in supabase/migrations/*.sql; do
              if [ -f "$file" ]; then
                # Basic SQL syntax check
                if ! grep -q ";" "$file"; then
                  echo "⚠️ Warning: $file might be missing semicolons"
                fi

                # Check for DROP statements
                if grep -i "DROP TABLE\|DROP COLUMN\|DROP DATABASE" "$file"; then
                  echo "⚠️ Warning: $file contains DROP statements. Please review carefully."
                fi

                # Check for missing transactions
                if grep -i "ALTER TABLE\|CREATE TABLE\|DROP" "$file" && ! grep -i "BEGIN\|COMMIT" "$file"; then
                  echo "ℹ️ Info: $file doesn't use transactions. Consider wrapping DDL in transactions."
                fi
              fi
            done
          fi

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [type-safety, code-quality, security-scan, preview-build]
    if: always()

    steps:
      - name: PR Check Summary
        run: |
          echo "## Pull Request Check Summary"
          echo ""

          if [ "${{ needs.type-safety.result }}" == "success" ]; then
            echo "✅ Type Safety: Passed"
          else
            echo "❌ Type Safety: Failed"
          fi

          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ Code Quality: Passed"
          else
            echo "❌ Code Quality: Failed"
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ Security Scan: Passed"
          else
            echo "❌ Security Scan: Failed"
          fi

          if [ "${{ needs.preview-build.result }}" == "success" ]; then
            echo "✅ Preview Build: Passed"
          else
            echo "❌ Preview Build: Failed"
          fi

          echo ""
          echo "---"
          echo "Ready to merge: ${{ needs.type-safety.result == 'success' && needs.code-quality.result == 'success' && needs.security-scan.result == 'success' && needs.preview-build.result == 'success' }}"