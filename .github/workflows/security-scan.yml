name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-audit:
    runs-on: ubuntu-latest
    name: Dependency Audit
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Upload audit results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json

  security-tests:
    runs-on: ubuntu-latest
    name: Security Tests
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: npm run test:security

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: coverage/

  trivy-scan:
    runs-on: ubuntu-latest
    name: Trivy Security Scan
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  semgrep:
    runs-on: ubuntu-latest
    name: Semgrep Security Scan
    steps:
      - uses: actions/checkout@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
            p/nextjs

  docker-scan:
    runs-on: ubuntu-latest
    name: Docker Security Scan
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3

      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        run: docker build -t xbrl-api:test .
        continue-on-error: true

      - name: Run Trivy on Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true' && success()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'xbrl-api:test'
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Upload Docker scan results
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true' && success()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-trivy-results.sarif'

  security-report:
    needs: [dependency-audit, security-tests, trivy-scan, codeql-analysis, semgrep]
    runs-on: ubuntu-latest
    name: Security Report
    if: always()
    steps:
      - name: Check security scan results
        run: |
          echo "Security scan completed"
          echo "Check the Security tab for detailed results"

      - name: Post to Slack
        if: github.event_name == 'schedule' && failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Security scan failed for XBRL API",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⚠️ *Security Scan Failed*\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}