name: Security Scanning

on:
  schedule:
    - cron: '0 0 * * 1'  # 毎週月曜日に実行
  workflow_dispatch:  # 手動実行も可能

permissions:
  contents: read
  security-events: write

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality,security-extended

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # 依存関係の脆弱性チェック
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # npm audit によるセキュリティチェック
  npm-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run npm audit
        run: npm audit --production --audit-level=moderate
        continue-on-error: true

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-results
          path: npm-audit.json

  # Trivy によるコンテナスキャン
  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # セキュリティテストの実行
  security-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run security tests
        run: |
          npm run test:security
          npm run test:security:input
          npm run test:security:sql
          npm run test:security:path
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://test.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'test-service-role-key' }}
          API_KEY_SECRET: ${{ secrets.API_KEY_SECRET || 'test-api-key-secret-minimum-32-chars' }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-test-results
          path: coverage/

  # OWASP ZAP スキャン
  owasp-zap:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install and build
        run: |
          npm ci
          npm run build

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000
        env:
          NODE_ENV: production

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # セキュリティヘッダーチェック
  security-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Security Headers
        run: |
          # セキュリティヘッダーの設定を確認
          echo "Checking for security headers configuration..."

          # next.config.jsでのセキュリティヘッダー確認
          if grep -q "headers" next.config.js 2>/dev/null || grep -q "headers" next.config.mjs 2>/dev/null; then
            echo "✅ Security headers configuration found"
          else
            echo "⚠️ No security headers configuration found in next.config"
            echo "Consider adding security headers like:"
            echo "- Content-Security-Policy"
            echo "- X-Frame-Options"
            echo "- X-Content-Type-Options"
            echo "- Referrer-Policy"
            echo "- Permissions-Policy"
          fi

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}