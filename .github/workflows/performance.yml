name: Performance Testing

on:
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # ÊØéÊó•2ÊôÇ„Å´ÂÆüË°å

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/api/health
            http://localhost:3000/docs
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3  # ÂêÑURL„Åß3ÂõûÂÆüË°å„Åó„Å¶Âπ≥Âùá„ÇíÂèñ„Çã

      - name: Format Lighthouse Score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('lighthouse-results.json', 'utf8'));

            const formatScore = (score) => {
              const percentage = Math.round(score * 100);
              if (percentage >= 90) return `üü¢ ${percentage}`;
              if (percentage >= 50) return `üü° ${percentage}`;
              return `üî¥ ${percentage}`;
            };

            const scores = results.map(result => ({
              url: result.url,
              performance: formatScore(result.categories.performance.score),
              accessibility: formatScore(result.categories.accessibility.score),
              bestPractices: formatScore(result.categories['best-practices'].score),
              seo: formatScore(result.categories.seo.score)
            }));

            return scores;

      - name: Comment PR with Lighthouse Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const scores = ${{ steps.format_lighthouse_score.outputs.result }};

            let comment = '## üîç Lighthouse Performance Results\n\n';

            scores.forEach(score => {
              comment += `### ${score.url}\n\n`;
              comment += '| Metric | Score |\n';
              comment += '|--------|-------|\n';
              comment += `| Performance | ${score.performance} |\n`;
              comment += `| Accessibility | ${score.accessibility} |\n`;
              comment += `| Best Practices | ${score.bestPractices} |\n`;
              comment += `| SEO | ${score.seo} |\n\n`;
            });

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  bundle-size:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          npx next-bundle-analyzer

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: .next/analyze/

      - name: Check bundle size limits
        run: |
          MAIN_BUNDLE_SIZE=$(find .next/static/chunks -name "main-*.js" -exec du -b {} \; | awk '{print $1}')
          MAX_SIZE=200000  # 200KB

          if [ $MAIN_BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "‚ùå Main bundle size ($MAIN_BUNDLE_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
            exit 1
          else
            echo "‚úÖ Main bundle size ($MAIN_BUNDLE_SIZE bytes) is within limit ($MAX_SIZE bytes)"
          fi