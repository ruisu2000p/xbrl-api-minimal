/**
 * „ÇØ„Ç§„ÉÉ„ÇØ „Ç§„É≥„Éù„Éº„Éà - Â∞ëÊï∞„Éï„Ç°„Ç§„É´„ÅÆ„ÉÜ„Çπ„ÉàÁî®
 * 
 * ‰ΩøÁî®ÊñπÊ≥ï:
 * node scripts/quick-import.js [limit]
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// SupabaseË®≠ÂÆö
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://wpwqxhyiglbtlaimrjrx.supabase.co';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!SUPABASE_SERVICE_KEY) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEYÁí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
const LIMIT = parseInt(process.argv[2]) || 10; // „Éá„Éï„Ç©„É´„Éà10„Éï„Ç°„Ç§„É´

console.log(`üöÄ „ÇØ„Ç§„ÉÉ„ÇØ„Ç§„É≥„Éù„Éº„ÉàÈñãÂßã (ÊúÄÂ§ß${LIMIT}„Éï„Ç°„Ç§„É´)`);

async function quickImport() {
  try {
    // 1. ÊúÄÂàù„ÅÆÊï∞„Éï„Ç©„É´„ÉÄ„ÇíÂèñÂæó (FY2021„Éï„Ç©„É´„ÉÄÂÜÖ„ÇíÁ¢∫Ë™ç)
    const { data: folders, error: foldersError } = await supabase.storage
      .from('markdown-files')
      .list('FY2021', { limit: 5 });
    
    if (foldersError) {
      console.log('FY2021„Éï„Ç©„É´„ÉÄ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ„É´„Éº„Éà„Éï„Ç©„É´„ÉÄ„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô');
      // „É´„Éº„Éà„Éï„Ç©„É´„ÉÄ„ÇíÁ¢∫Ë™ç
      const { data: rootFolders, error: rootError } = await supabase.storage
        .from('markdown-files')
        .list('', { limit: 5 });
        
      if (rootError) {
        throw new Error(`„Éï„Ç©„É´„ÉÄÂèñÂæó„Ç®„É©„Éº: ${rootError.message}`);
      }
      console.log('„É´„Éº„Éà„Éï„Ç©„É´„ÉÄÊßãÈÄ†:', rootFolders?.map(f => f.name));
      throw new Error(`FY2021„Éï„Ç©„É´„ÉÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
    }
    
    let fileCount = 0;
    let processedCount = 0;
    
    // 2. ÂêÑ„Éï„Ç©„É´„ÉÄÂÜÖ„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ
    for (const folder of folders) {
      if (fileCount >= LIMIT) break;
      
      console.log(`\nüìÅ Âá¶ÁêÜ‰∏≠: ${folder.name}`);
      
      // PublicDoc_markdown„Éï„Ç©„É´„ÉÄÂÜÖ„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
      const publicDocPath = `${folder.name}/PublicDoc_markdown`;
      const { data: files, error: filesError } = await supabase.storage
        .from('markdown-files')
        .list(publicDocPath, { limit: 5 });
      
      if (filesError || !files) {
        console.log(`  ‚ö† ${publicDocPath} „Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì`);
        continue;
      }
      
      // 3. „Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ
      for (const file of files) {
        if (fileCount >= LIMIT || !file.name.endsWith('.md')) continue;
        
        const filePath = `${publicDocPath}/${file.name}`;
        console.log(`  üìÑ ${file.name}`);
        
        try {
          // „Éï„Ç°„Ç§„É´ÂÜÖÂÆπ„ÇíÂèñÂæó
          const { data: fileData, error: downloadError } = await supabase.storage
            .from('markdown-files')
            .download(filePath);
          
          if (downloadError) {
            console.log(`    ‚ùå „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂ§±Êïó: ${downloadError.message}`);
            continue;
          }
          
          const content = await fileData.text();
          const preview = content.substring(0, 500);
          
          // „Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíËß£Êûê
          let fileType = 'other';
          if (file.name.includes('0101010_honbun')) fileType = 'company_overview';
          else if (file.name.includes('0102010_honbun')) fileType = 'business_overview';
          else if (file.name.includes('0000000_header')) fileType = 'header';
          
          const orderMatch = file.name.match(/^([0-9]+)/);
          const fileOrder = orderMatch ? parseInt(orderMatch[1]) : 9999;
          
          // „Éá„Éº„Çø„Éô„Éº„Çπ„Å´ÊåøÂÖ•
          const { error: insertError } = await supabase
            .from('financial_documents')
            .upsert({
              company_id: folder.name,
              file_name: file.name,
              file_path: filePath,
              file_type: fileType,
              file_order: fileOrder,
              doc_category: 'PublicDoc',
              fiscal_year: 2021,
              storage_path: `markdown-files/${filePath}`,
              content_preview: preview,
              full_content: content,
              metadata: { 
                imported_at: new Date().toISOString(),
                quick_import: true 
              },
              processed_at: new Date().toISOString()
            }, {
              onConflict: 'storage_path'
            });
          
          if (insertError) {
            console.log(`    ‚ùå DBÊåøÂÖ•Â§±Êïó: ${insertError.message}`);
          } else {
            processedCount++;
            console.log(`    ‚úÖ Âá¶ÁêÜÂÆå‰∫Ü`);
          }
          
          fileCount++;
        } catch (error) {
          console.log(`    ‚ùå Âá¶ÁêÜ„Ç®„É©„Éº: ${error.message}`);
        }
      }
    }
    
    console.log(`\nüéâ ÂÆå‰∫Ü: ${processedCount}/${fileCount} „Éï„Ç°„Ç§„É´Âá¶ÁêÜ`);
    
    // ÁµêÊûúÁ¢∫Ë™ç
    const { count } = await supabase
      .from('financial_documents')
      .select('*', { count: 'exact', head: true });
    
    console.log(`üìä Á∑è„É¨„Ç≥„Éº„ÉâÊï∞: ${count}`);
    
    // „Çµ„É≥„Éó„É´Ë°®Á§∫
    const { data: samples } = await supabase
      .from('financial_documents')
      .select('company_id, file_type, file_name')
      .limit(5);
    
    if (samples && samples.length > 0) {
      console.log('\nüìã „Çµ„É≥„Éó„É´„Éá„Éº„Çø:');
      samples.forEach(sample => {
        console.log(`  - ${sample.company_id}: ${sample.file_type} (${sample.file_name.substring(0, 50)}...)`);
      });
    }
    
  } catch (error) {
    console.error(`‚ùå „Ç®„É©„Éº: ${error.message}`);
    process.exit(1);
  }
}

quickImport();