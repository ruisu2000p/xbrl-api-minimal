#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  { auth: { persistSession: false } }
);

async function checkUserLocation() {
  const email = 'pumpkin3020@gmail.com';
  
  console.log('üîç Checking where user is stored:', email);
  console.log('');
  
  // 1. Supabase Auth (auth.users)„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  console.log('üì¶ SUPABASE - Authentication System:');
  console.log('----------------------------------------');
  const { data: authUsers } = await supabase.auth.admin.listUsers();
  const authUser = authUsers?.users?.find(u => u.email === email);
  
  if (authUser) {
    console.log('‚úÖ Found in Supabase Auth (auth.users table):');
    console.log('   ‚Ä¢ User ID:', authUser.id);
    console.log('   ‚Ä¢ Email:', authUser.email);
    console.log('   ‚Ä¢ Created:', new Date(authUser.created_at).toLocaleString());
    console.log('   ‚Ä¢ Email Confirmed:', authUser.email_confirmed_at ? 'Yes' : 'No');
    console.log('   ‚Ä¢ Location: Supabase Dashboard > Authentication > Users');
    console.log('   ‚Ä¢ URL: https://supabase.com/dashboard/project/zxzyidqrvzfzhicfuhlo/auth/users');
  } else {
    console.log('‚ùå NOT found in Supabase Auth');
  }
  
  // 2. Supabase Database (public.users)„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  console.log('');
  console.log('üì¶ SUPABASE - Database (public.users):');
  console.log('----------------------------------------');
  const { data: publicUsers } = await supabase
    .from('users')
    .select('*')
    .eq('email', email);
  
  if (publicUsers && publicUsers.length > 0) {
    console.log('‚úÖ Found in Supabase Database:');
    publicUsers.forEach(u => {
      console.log('   ‚Ä¢ User ID:', u.id);
      console.log('   ‚Ä¢ Email:', u.email);
      console.log('   ‚Ä¢ Name:', u.name || 'Not set');
    });
    console.log('   ‚Ä¢ Location: Supabase Dashboard > Table Editor > users');
    console.log('   ‚Ä¢ URL: https://supabase.com/dashboard/project/zxzyidqrvzfzhicfuhlo/editor');
  } else {
    console.log('‚ùå NOT found in public.users table');
  }
  
  // 3. Vercel„Å´„ÅØ„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅØ‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ
  console.log('');
  console.log('üì¶ VERCEL:');
  console.log('----------------------------------------');
  console.log('‚ùå Vercel does NOT store user data');
  console.log('   ‚Ä¢ Vercel hosts the application code only');
  console.log('   ‚Ä¢ All user data is stored in Supabase');
  console.log('   ‚Ä¢ App URL: https://xbrl-api-minimal.vercel.app/');
  
  // 4. ÂÖ®„É¶„Éº„Ç∂„Éº„É™„Çπ„Éà
  console.log('');
  console.log('üìã ALL REGISTERED USERS IN SUPABASE:');
  console.log('----------------------------------------');
  if (authUsers?.users && authUsers.users.length > 0) {
    authUsers.users.forEach((u, i) => {
      console.log(`${i + 1}. ${u.email}`);
      console.log(`   ID: ${u.id}`);
      console.log(`   Created: ${new Date(u.created_at).toLocaleDateString()}`);
    });
  } else {
    console.log('No users found');
  }
  
  // 5. „Éá„Éº„Çø‰øùÁÆ°Â†¥ÊâÄ„ÅÆ„Åæ„Å®„ÇÅ
  console.log('');
  console.log('üìç DATA STORAGE SUMMARY:');
  console.log('========================================');
  console.log('‚úÖ USER DATA ‚Üí SUPABASE');
  console.log('   ‚Ä¢ auth.users table (Authentication)');
  console.log('   ‚Ä¢ public.users table (Database)');
  console.log('');
  console.log('‚úÖ API KEYS ‚Üí SUPABASE');
  console.log('   ‚Ä¢ api_keys table (Database)');
  console.log('');
  console.log('‚úÖ APPLICATION CODE ‚Üí VERCEL');
  console.log('   ‚Ä¢ Next.js application');
  console.log('   ‚Ä¢ API endpoints');
  console.log('');
  console.log('üîó Direct Links:');
  console.log('   ‚Ä¢ Supabase Users: https://supabase.com/dashboard/project/zxzyidqrvzfzhicfuhlo/auth/users');
  console.log('   ‚Ä¢ Supabase Tables: https://supabase.com/dashboard/project/zxzyidqrvzfzhicfuhlo/editor/26325');
  console.log('   ‚Ä¢ Vercel App: https://xbrl-api-minimal.vercel.app/');
}

checkUserLocation().catch(console.error);